#!/usr/bin/python
import sys
import os
import subprocess
import p423_autograder as A

class TestRunner:
  """
  AUTHOR: Christopher Zakian | czakian@indiana.edu

  this class is an easy way to test out running the autograder
  on a full class of students. 
  you must pass it an assignment and a hashfile (containing
  a newline delimited line(s) of username/github-hash.
  these are then run individually in the autograder

  note: this class can be invokd as such: ./test_runner.py a1 a1/student_hashes_a1.txt 
  """

  def __init__(self, assignment, hashfile):
    """
    Initialize the class.

    ARGS:
    assignment is the name of the assignment, and should correspond
    to the branch that the student is working on.

    hashfile is an open file pointer to a file the contains 
    lines that look like the following:

    jsmith/23234a3ae2313342

    where jsmith is the username
    and the hash is a github revision number. 
    note: this file should be generated by the pull_repos.py script

    RETURNS: this object

    """
    self.repo = "p423-523-sp13"
    self.framework = "framework-private"
    self.assignment = assignment
    self.hashfile = hashfile
    if not os.path.exists(assignment):
      os.mkdir(assignment)
    self.outfile = open(assignment+"/"+assignment+"_all_reports.txt", "w+")

  def get_solution_hash(self):
    """
    Gets the github hash from the head of the branch for this assignment.
    This provides the solution hash against which all student assignments
    will be compared. in the p423 framework, these solution branches are 
    <assignment>sol. This assumes the the head of the solution branch is
    up to date and correct. if this is not the case, you may want to manually
    specify the the github hash by hard coding it. 

    RETURNS: the github commit hash for the solution branch

    """
    cwd = os.getcwd()
    cmd = "git clone git@github.iu.edu:"+self.repo+"/"+self.framework+".git"
    os.system(cmd)
    os.chdir(self.framework)
    os.system("git checkout " + self.assignment + "sol")
    os.chdir(cwd)
    p = subprocess.Popen(
           ["git", "rev-parse", "HEAD"], 
           stdout=subprocess.PIPE, 
           stderr=subprocess.PIPE, 
           stdin=subprocess.PIPE
        )
    
    while p.poll() == None:
      hash = p.stdout.readline().decode("utf-8")

    return hash

  def grade_students(self, opts):
    """
    Recursively grades each student submission
    by pulling their repository, checking out the hash
    from the hashfile, and then running it on the testing
    framework in the private-framework repository. 

    ARGS:
    opts gives the option to run the full student compiler, 
    or to substitute one pass a time to test each pass individually
    using the solution passes for everything except the pass in question.
    The single pass option is currently NOT supported, but there are plans
    to support it in the very near future. 

    RETURNS: a string of xml marked up test results
    """

    solution_hash = self.get_solution_hash()
    for student_hash in self.hashfile:
      student_hash = student_hash.strip()
      if not student_hash:
        continue
      autograder = A.P423Grader(solution_hash, student_hash, opts)
      report = autograder.grade()
      autograder.cleanup()
      print(report)
      self.outfile.write("\n-------------------------------\n")
      self.outfile.write("Report for: "+autograder.username+"\n\n")
      if report:
        self.outfile.write(report+"\n")
      else:
        self.outfile.write("ERROR: could not compile/run submission for: " + autograder.username)
      self.outfile.flush()



def main():

  if len(sys.argv) <= 2:
    print("Too few arguments. Usage: <assignment-name> <hash-file>")
    sys.exit()

  assignment = sys.argv[1]
  hashfile  = open(sys.argv[2])
  runner = TestRunner(assignment,hashfile)
  runner.grade_students('all')
  runner.outfile.close()
  hashfile.close()

# call
if __name__ == "__main__":
      main()
