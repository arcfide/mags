\def\title{SCHEME AUTOGRADER (VERSION 3.0)}
\def\topofcontents{\null\vfill
  \centerline{\titlefont Scheme Autograder}
  \vskip 15pt
  \centerline{(Version 3.0)}
  \vfill}
\def\botofcontents{\vfill
\noindent
Copyright $\copyright$ 2012 
Aaron W. Hsu $\.{arcfide@@sacrideo.us}$,
Karissa R. McKelvey $\.{krmckelv@@indiana.edu}$,
Josh Cox $\.{joshcox@@indiana.edu}$,
Michael DeWitt $\.{midewitt@@indiana.edu}$
\smallskip\noindent
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
\smallskip\noindent
THE SOFTWARE IS PROVIDED ``AS IS'' AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
}

@* Introduction.

@p
@<Load shared libraries@>
@<Time Limiting Procedure@>

@* Command-line Program.

@* Implementation.

@* Time limiting evaluation.
This section defines |with-time-limit|, a procedure that evaluates thunk,
using a low-level timer to limit the execution time. It is meant to be safe for
use with all standard (non-FFI) Scheme forms, including engines. It uses Chez
Scheme's low-level signal handling interface, so code using this form should
not rely on or use this interface for other purposes. The syntax is as follows:

\medskip\verbatim
(with-time-limit seconds handler-thunk proc-thunk)
!endverbatim

\noindent The |proc-thunk| is evaluated with a time limit, and a signal handler
is registered before executing |proc-thunk| that will call the |handler-thunk|
if the execution time exceeds the time limit and return the value returned by 
the |handler-thunk|.

@c () => (with-time-limit)
@<Time Limiting Procedure@>=
(define signal/alarm 14) ; Magic constant 14 from signal.h
(define $alarm (foreign-procedure "alarm" (unsigned-int) unsigned-int))
(define (with-time-limit seconds handler-thunk proc-thunk)
  (call-with-current-continuation 
    (lambda (return)
      (register-signal-handler signal/alarm (lambda (x) (return (handler-thunk))))
      ($alarm seconds)
      (proc-thunk))))
  
@ The above code relies on the foreign |alarm(2)| function which we import
from the standard C library.

@c () => ()
@<Load shared libraries@>=
(load-shared-object "libc.so.6")
  
@* Creating Sandboxes.

@* Creating new Equality testers.

@* XML Runner.

@* Index.
