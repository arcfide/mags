\def\title{SAFE IO LIBRARY (VERSION 2.0)}
\def\topofcontents{\null\vfill
  \centerline{\titlefont MAGS: Safe I/O Library}
  \vskip 15pt
  \centerline{(Version 2.0)}
  \vfill}
\def\botofcontents{\vfill
\noindent
Copyright $\copyright$ 2012
Joshua D. Cox $\langle\.{joshcox@indiana.edu}\rangle$
\smallskip\noindent
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.
\smallskip\noindent
THE SOFTWARE IS PROVIDED ``AS IS'' AND THE AUTHOR DISCLAIMS ALL
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
}

@* Introduction
This library contains procedures for constructing and 
manipulating a virtual file system for a sandbox environment.

@(io.sls@>=
(library (mags io)
   (export)
   (import
      (srfi :64)
      (mags sandbox)
      (except (chezscheme)
         delete-file
         file-exists?
         open-input-file
         open-output-file
         call-with-input-file
         call-with-output-file
         with-input-from-file
         with-output-to-file
         close-port))
   (include "filesystemADT.ss"))

@* Overview.
This library creates a sandbox virtual file system. The main purpose
of this sandbox is to enable the mags auto-grading system to grade
scheme code that can input/output to files. By creating a virtual
file system, space usage will be able to be controlled as well as
the ability to maintain the integrity of the top-level filesystem.


@* Current Virtual Filesystem
The following creates a parameter that represents the current virtual 
filesystem that is being used. It has the structure of a tree with a
root node (name of directory), a left node which contains a list of 
files in the current directory, and a right node which contains a list
of directories, all of which follow the same format mentioned above.

(define virtual-filesystem
   (make-parameter
      (tree '/ (empty-tree) (empty-tree))
      (lambda (x)
         (assert (tree? x))
         x)))

@ Test cases for |current-vfs|

<insert test cases here>

@* Files and Directories



     
